        -:    0:Source:../main.cpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:#include <bits/stdc++.h>
        -:    2:#include "AC.h"
        -:    3:
        -:    4:using namespace std;
        -:    5:
        -:    6:const int Inf = 2e9;
        -:    7:
function _ZN6VertexC2Ev called 35 returned 100% blocks executed 100%
       35:    8:Vertex::Vertex() {
       35:    9:    fill(next, next + 26, -1);
call    0 returned 100%
       35:   10:    fill(go, go + 26, -1);
call    0 returned 100%
       35:   11:    leaf = false;
       35:   12:    p = -1;
       35:   13:    pch = -1;
       35:   14:    link = -1;
       35:   15:    suff_go = false;
       35:   16:    ind = -1;
       35:   17:}
        -:   18:
        -:   19:
function _ZN11AhoCorasickC2Ev called 2 returned 100% blocks executed 100%
        2:   20:AhoCorasick::AhoCorasick() {
call    0 returned 100%
call    1 returned 100%
        2:   21:    bor.push_back(Vertex());
call    0 returned 100%
call    1 returned 100%
        2:   22:}
        -:   23:
function _ZN11AhoCorasick10add_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 8 returned 100% blocks executed 100%
        8:   24:void AhoCorasick::add_string(string& s, int ind) {
        8:   25:    int v = 0;
       56:   26:    for (int i = 0; i < s.size(); ++i) {
call    0 returned 100%
branch  1 taken 86%
branch  2 taken 14% (fallthrough)
       48:   27:        if (bor[v].next[s[i] - 'a'] == -1) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
       33:   28:            bor.push_back(Vertex());
call    0 returned 100%
call    1 returned 100%
       33:   29:            bor.back().p = v;
call    0 returned 100%
       33:   30:            bor.back().pch = s[i];
call    0 returned 100%
call    1 returned 100%
       33:   31:            bor[v].next[s[i] - 'a'] = bor.size() - 1;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   32:        }
       48:   33:        v = bor[v].next[s[i] - 'a'];
call    0 returned 100%
call    1 returned 100%
        -:   34:    }
        8:   35:    bor[v].leaf = true;
call    0 returned 100%
        8:   36:    bor[v].ind = ind;
call    0 returned 100%
        8:   37:    dict.push_back(false);
call    0 returned 100%
        8:   38:}
        -:   39:
function _ZN11AhoCorasick8get_linkEi called 20 returned 100% blocks executed 100%
       20:   40:int AhoCorasick::get_link(int v) {
       20:   41:    if (bor[v].link == -1) {
call    0 returned 100%
branch  1 taken 55% (fallthrough)
branch  2 taken 45%
       11:   42:        if (v == 0 || bor[v].p == 0) {
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
call    2 returned 100%
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
branch  5 taken 27% (fallthrough)
branch  6 taken 73%
        3:   43:            bor[v].link = 0;
call    0 returned 100%
        -:   44:        }
        -:   45:        else {
        8:   46:            bor[v].link = go(get_link(bor[v].p), bor[v].pch - 'a');
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   47:        }
        -:   48:    }
       20:   49:    return bor[v].link;
call    0 returned 100%
        -:   50:}
        -:   51:
function _ZN11AhoCorasick2goEic called 16 returned 100% blocks executed 100%
       16:   52:int AhoCorasick::go(int v, char c) {
       16:   53:    if (bor[v].go[c] == -1) {
call    0 returned 100%
branch  1 taken 81% (fallthrough)
branch  2 taken 19%
       13:   54:        if (bor[v].next[c] != -1) {
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
       10:   55:            bor[v].go[c] = bor[v].next[c];
call    0 returned 100%
call    1 returned 100%
        -:   56:        }
        3:   57:        else if (v == 0) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:   58:            bor[v].go[c] = 0;
call    0 returned 100%
        -:   59:        }
        -:   60:        else {
        1:   61:            bor[v].go[c] = go(get_link(v), c);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   62:        }
        -:   63:    }
       16:   64:    return bor[v].go[c];
call    0 returned 100%
        -:   65:}
        -:   66:
function _ZN11AhoCorasick7suff_goEi called 17 returned 100% blocks executed 100%
       17:   67:void AhoCorasick::suff_go(int v) {
       17:   68:    if (bor[v].suff_go) {
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
        6:   69:        return;
        -:   70:    }
       11:   71:    bor[v].suff_go = true;
call    0 returned 100%
       11:   72:    if (bor[v].leaf) {
call    0 returned 100%
branch  1 taken 45% (fallthrough)
branch  2 taken 55%
        5:   73:        dict[bor[v].ind] = true;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   74:    }
       11:   75:    if (v != 0) {
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       10:   76:        suff_go(get_link(v));
call    0 returned 100%
call    1 returned 100%
        -:   77:    }
        -:   78:}
        -:   79:
function _ZN11AhoCorasick7visitedEi called 8 returned 100% blocks executed 100%
        8:   80:bool AhoCorasick::visited(int i) {
        8:   81:    return dict[i];
call    0 returned 100%
call    1 returned 100%
        -:   82:}
