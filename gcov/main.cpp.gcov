        -:    0:Source:../main.cpp
        -:    0:Graph:executable-main.gcno
        -:    0:Data:executable-main.gcda
        -:    0:Runs:1
        -:    1:#include <bits/stdc++.h>
        -:    2:
        -:    3:using namespace std;
        -:    4:
        -:    5:const int Inf = 2e9;
        -:    6:
        -:    7:struct Vertex {
        -:    8:    int next[26];
        -:    9:    bool leaf;
        -:   10:    int p;
        -:   11:    char pch;
        -:   12:    int link;
        -:   13:    int go[26];
        -:   14:    bool suff_go;
        -:   15:    int ind;
        -:   16:
function _ZN6VertexC2Ev called 34 returned 100% blocks executed 100%
       34:   17:    Vertex() {
       34:   18:        fill(next, next + 26, -1);
call    0 returned 100%
       34:   19:        fill(go, go + 26, -1);
call    0 returned 100%
       34:   20:        leaf = false;
       34:   21:        p = -1;
       34:   22:        pch = -1;
       34:   23:        link = -1;
       34:   24:        suff_go = false;
       34:   25:        ind = -1;
       34:   26:    }
        -:   27:};
        -:   28:
        -:   29:class AhoCorasick {
        -:   30:private:
        -:   31:    vector<Vertex> bor;
        -:   32:    vector<bool> dict;
        -:   33:public:
        -:   34:
function _ZN11AhoCorasickC2Ev called 1 returned 100% blocks executed 100%
        1:   35:    AhoCorasick() {
call    0 returned 100%
call    1 returned 100%
        1:   36:        bor.push_back(Vertex());
call    0 returned 100%
call    1 returned 100%
        1:   37:    }
        -:   38:
function _ZN11AhoCorasick10add_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 8 returned 100% blocks executed 100%
        8:   39:    void add_string(string& s, int ind) {
        8:   40:        int v = 0;
       56:   41:        for (int i = 0; i < s.size(); ++i) {
call    0 returned 100%
branch  1 taken 86%
branch  2 taken 14% (fallthrough)
       48:   42:            if (bor[v].next[s[i] - 'a'] == -1) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
       33:   43:                bor.push_back(Vertex());
call    0 returned 100%
call    1 returned 100%
       33:   44:                bor.back().p = v;
call    0 returned 100%
       33:   45:                bor.back().pch = s[i];
call    0 returned 100%
call    1 returned 100%
       33:   46:                bor[v].next[s[i] - 'a'] = bor.size() - 1;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   47:            }
       48:   48:            v = bor[v].next[s[i] - 'a'];
call    0 returned 100%
call    1 returned 100%
        -:   49:        }
        8:   50:        bor[v].leaf = true;
call    0 returned 100%
        8:   51:        bor[v].ind = ind;
call    0 returned 100%
        8:   52:        dict.push_back(false);
call    0 returned 100%
        8:   53:    }
        -:   54:
function _ZN11AhoCorasick8get_linkEi called 19 returned 100% blocks executed 100%
       19:   55:    int get_link(int v) {
       19:   56:        if (bor[v].link == -1) {
call    0 returned 100%
branch  1 taken 53% (fallthrough)
branch  2 taken 47%
       10:   57:            if (v == 0 || bor[v].p == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
branch  5 taken 20% (fallthrough)
branch  6 taken 80%
        2:   58:                bor[v].link = 0;
call    0 returned 100%
        -:   59:            }
        -:   60:            else {
        8:   61:                bor[v].link = go(get_link(bor[v].p), bor[v].pch - 'a');
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   62:            }
        -:   63:        }
       19:   64:        return bor[v].link;
call    0 returned 100%
        -:   65:    }
        -:   66:
function _ZN11AhoCorasick2goEic called 16 returned 100% blocks executed 100%
       16:   67:    int go(int v, char c) {
       16:   68:        if (bor[v].go[c] == -1) {
call    0 returned 100%
branch  1 taken 81% (fallthrough)
branch  2 taken 19%
       13:   69:            if (bor[v].next[c] != -1) {
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
       10:   70:                bor[v].go[c] = bor[v].next[c];
call    0 returned 100%
call    1 returned 100%
        -:   71:            }
        3:   72:            else if (v == 0) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:   73:                bor[v].go[c] = 0;
call    0 returned 100%
        -:   74:            }
        -:   75:            else {
        1:   76:                bor[v].go[c] = go(get_link(v), c);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   77:            }
        -:   78:        }
       16:   79:        return bor[v].go[c];
call    0 returned 100%
        -:   80:    }
        -:   81:
function _ZN11AhoCorasick7suff_goEi called 17 returned 100% blocks executed 100%
       17:   82:    void suff_go(int v) {
       17:   83:        if (bor[v].suff_go) {
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
        6:   84:            return;
        -:   85:        }
       11:   86:        bor[v].suff_go = true;
call    0 returned 100%
       11:   87:        if (bor[v].leaf) {
call    0 returned 100%
branch  1 taken 45% (fallthrough)
branch  2 taken 55%
        5:   88:            dict[bor[v].ind] = true;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   89:        }
       11:   90:        if (v != 0) {
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       10:   91:            suff_go(get_link(v));
call    0 returned 100%
call    1 returned 100%
        -:   92:        }
        -:   93:    }
        -:   94:
function _ZN11AhoCorasick7visitedEi called 8 returned 100% blocks executed 100%
        8:   95:    bool visited(int i) {
        8:   96:        return dict[i];
call    0 returned 100%
call    1 returned 100%
        -:   97:    }
        -:   98:};
        -:   99:
function main called 1 returned 100% blocks executed 98%
        1:  100:int main()
        -:  101:{
        1:  102:    ios_base::sync_with_stdio(0);
call    0 returned 100%
        1:  103:    cin.tie(0);
call    0 returned 100%
        1:  104:    cout.tie(0);
call    0 returned 100%
        1:  105:    AhoCorasick AC;
call    0 returned 100%
       10:  106:    string data[] = {"abacabadabacaba", "olo", "trol", "", "trolololo", "t", "troglodit", "trololo"};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
        1:  107:    bool results[] = {false, true, true, true, false, true, false, true};
        1:  108:    string t = "trololo";
call    0 returned 100%
call    1 returned 100%
        1:  109:    int k = 8;
        9:  110:    for (int i = 0; i < k; ++i) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        8:  111:        string s = data[i];
call    0 returned 100%
        8:  112:        AC.add_string(s, i);
call    0 returned 100%
        8:  113:    }
call    0 returned 100%
        1:  114:    int v = 0;
        8:  115:    for (int i = 0; i < t.size(); ++i) {
call    0 returned 100%
branch  1 taken 88%
branch  2 taken 12% (fallthrough)
        7:  116:        v = AC.go(v, t[i] - 'a');
call    0 returned 100%
call    1 returned 100%
        7:  117:        AC.suff_go(v);
call    0 returned 100%
        -:  118:    }
        9:  119:    for (int i = 0; i < k; ++i) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       8*:  120:        assert(AC.visited(i) == results[i]);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  121:    }
        1:  122:    return 0;
       11:  123:}
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
call    3 returned 100%
